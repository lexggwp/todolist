{"version":3,"sources":["Components/Todolist.module.css","Components/Input.tsx","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Components/Todolist.tsx","Components/ButtonAppBar.tsx","reducers/tasksReducer.ts","reducers/todolistsReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Input","props","TextField","style","marginRight","error","size","onKeyDown","event","key","addItem","value","title","onChange","setError","setInputValue","currentTarget","id","label","variant","AddItemForm","useState","inputValue","AddItem","trim","length","Button","onClick","EditableSpan","editView","setEditView","toggleMode","changeTaskInputValue","onBlur","autoFocus","onDoubleClick","Todolist","onClickFilterHandler","FilterName","changeFilter","todolistID","changeTodolistTitle","IconButton","deleteTodolist","Delete","addTask","tasks","map","t","className","isDone","Checkbox","color","checked","changeIsDone","removeTask","filter","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","tasksReducer","state","action","type","el","newTask","v1","todolistId","taskId","newInputText","todolistsReducer","newTodolist","App","todolistID1","todolistID2","useReducer","todolists","todolistsDispatch","tasksDispatch","removeTaskAC","changeStatusTask","changeStatusTaskAC","addTaskAC","changeTaskInput","changeTaskInputValueAC","changeTodolistFilter","changeTodolistFilterAC","deleteTodolistAC","changeTodolistTitleAC","Container","fixed","Grid","container","padding","todolistTitle","addTodolistAC","spacing","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8b825c55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"Todolist_errorMessage__2maf0\",\"activeFilter\":\"Todolist_activeFilter__3RkJo\",\"isDone\":\"Todolist_isDone__13IaF\",\"error\":\"Todolist_error__Vrsrb\"};","import React from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype InputPropsType = {\r\n    setInputValue: (title: string) => void,\r\n    title: string;\r\n    addItem: () => void\r\n    error: string;\r\n    setError: (error: string) => void;\r\n}\r\n\r\nconst Input = (props: InputPropsType) => {\r\n\r\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.setError('')\r\n        props.setInputValue(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            props.addItem();\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <TextField style={ {marginRight: '5px'}} error={!!props.error}\r\n                       size=\"small\"\r\n                       onKeyDown={onKeyPressHandler}\r\n                       value={props.title}\r\n                       onChange={onChangeHandler}\r\n                       id=\"outlined-basic\"\r\n                       label={props.error ? 'Invalid text!': 'Put a text'}\r\n                       variant=\"outlined\" />\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default Input;","import React, {useState} from 'react';\r\nimport Input from \"./Input\";\r\nimport {Button} from \"@mui/material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (inputValue: string) => void;\r\n\r\n}\r\n\r\nconst AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [error, setError] = useState<string>('')\r\n    const [inputValue, setInputValue] = useState('');\r\n    const AddItem = () => {\r\n        if (inputValue.trim().length) {\r\n            props.addItem(inputValue)\r\n            setInputValue('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Input setError={setError} error={error} addItem={AddItem} title={inputValue} setInputValue={setInputValue}/>\r\n            <Button size=\"large\" variant=\"contained\" onClick={AddItem}>+</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    inputValue: string;\r\n    changeTaskInputValue: (inputValue: string) => void;\r\n}\r\n\r\nconst EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editView, setEditView] = useState(false);\r\n    const [inputValue, setInputValue] = useState(props.inputValue)\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.currentTarget.value)\r\n    }\r\n\r\n    const toggleMode = () => {\r\n        setEditView(!editView);\r\n        if (editView && inputValue !== props.inputValue && inputValue.length) {\r\n            props.changeTaskInputValue(inputValue);\r\n        } else\r\n            setInputValue(props.inputValue)\r\n    }\r\n\r\n    return (\r\n        editView ?  <TextField variant={'standard'} onChange={onChangeHandler} onBlur={toggleMode} value={inputValue} autoFocus/> :\r\n            <span onDoubleClick={toggleMode} >{props.inputValue}</span>\r\n    );\r\n};\r\n\r\nexport default EditableSpan;","import React from 'react';\r\nimport {FilterValuesType} from '../App';\r\nimport style from \"./Todolist.module.css\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from '@mui/material';\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    inputValue: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, filterName: FilterValuesType) => void\r\n    addTask: (todolistID: string, newTitle: string) => void;\r\n    changeIsDone: (todolistID: string, id: string, value: boolean) => void;\r\n    filter: FilterValuesType;\r\n    todolistID: string;\r\n    deleteTodolist: (todolistID: string) => void;\r\n    changeTaskInputValue: (todolistId: string, taskId: string, inputValue: string) => void;\r\n    changeTodolistTitle: (todolistId: string, title: string) => void;\r\n}\r\n\r\nfunction Todolist(props: PropsType) {\r\n\r\n    const onClickFilterHandler = (FilterName: FilterValuesType) => props.changeFilter(props.todolistID, FilterName);\r\n    const onClickDeleteTask = (id: string) => {\r\n        props.removeTask(props.todolistID, id)\r\n    }\r\n\r\n    const onChangeHandler = (id: string, value: boolean) => {\r\n        props.changeIsDone(props.todolistID, id, value)\r\n    }\r\n\r\n    const onClickDeleteTodolist = () => {\r\n        props.deleteTodolist(props.todolistID);\r\n    }\r\n\r\n    const addTaskHandler = (inputValue: string) => {\r\n        props.addTask(props.todolistID, inputValue)\r\n    }\r\n\r\n    const changeTodolistTitleHandler = (title: string) => {\r\n        props.changeTodolistTitle(props.todolistID, title)\r\n    }\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan inputValue={props.title} changeTaskInputValue={changeTodolistTitleHandler}/>\r\n            <IconButton onClick={onClickDeleteTodolist}><Delete/></IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskHandler}/>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const changeTaskInputValueHandler = (inputValue: string) => {\r\n                        props.changeTaskInputValue(props.todolistID, t.id, inputValue)\r\n                    }\r\n                    return (\r\n                        <li className={t.isDone ? style.isDone : ''} key={t.id}>\r\n                            <Checkbox color=\"success\" onChange={(event) => onChangeHandler(t.id, event.currentTarget.checked)}\r\n                                      checked={t.isDone} />\r\n                            <EditableSpan changeTaskInputValue={changeTaskInputValueHandler} inputValue={t.inputValue}/>\r\n                            <IconButton onClick={() => onClickDeleteTask(t.id)}><Delete/></IconButton>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\": \"outlined\"}\r\n                    onClick={() => onClickFilterHandler('all')}>All</Button>\r\n            <Button variant={props.filter === 'active' ? \"contained\": \"outlined\"}\r\n                    onClick={() => onClickFilterHandler('active')}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ? \"contained\": \"outlined\"}\r\n                    onClick={() => onClickFilterHandler('completed')}>Completed</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Todolist;","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        Todolist\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import { v1 } from \"uuid\";\r\nimport {TasksType} from \"../App\";\r\n\r\ntype RemoveTaskACType = ReturnType<typeof removeTaskAC>\r\ntype ChangeStatusTaskACType = ReturnType<typeof changeStatusTaskAC>\r\ntype addTaskACType = ReturnType<typeof addTaskAC>\r\ntype ChangeTaskInputValueACType = ReturnType<typeof changeTaskInputValueAC>\r\ntype AddTodolistHelperACType = ReturnType<typeof addTodolistHelperAC>\r\n\r\n\r\n\r\n\r\ntype ActionType = RemoveTaskACType | ChangeStatusTaskACType | addTaskACType |\r\n    ChangeTaskInputValueACType | AddTodolistHelperACType\r\n\r\nexport const tasksReducer = (state: TasksType, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter( el => el.id !== action.id)};\r\n        case 'CHANGE-STATUS-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].map( el => el.id === action.id ? {...el, isDone: action.value}: el )}\r\n        case \"ADD-TASK\":\r\n            let newTask = {id: v1(), inputValue: action.title, isDone: false}\r\n            return {...state, [action.todolistID]: [newTask, ...state[action.todolistID]]}\r\n        case \"CHANGE-TASK-INPUT\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(el => el.id === action.taskId ? {...el, inputValue: action.newInputText} : el)}\r\n        case \"ADD-TODOLIST-HELPER\":\r\n            return {...state, [action.todolistID]: []}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (todolistID: string, id: string) =>\r\n    ({type: 'REMOVE-TASK', todolistID, id} as const);\r\nexport const changeStatusTaskAC = (todolistID: string, id: string, value: boolean) =>\r\n    ({type: 'CHANGE-STATUS-TASK', todolistID, id, value} as const);\r\nexport const addTaskAC = (todolistID: string, title: string) =>\r\n    ({type: 'ADD-TASK', todolistID, title} as const);\r\nexport const changeTaskInputValueAC = (todolistId: string, taskId: string, newInputText: string) =>\r\n    ({type: 'CHANGE-TASK-INPUT', todolistId, taskId, newInputText} as const)\r\nexport const addTodolistHelperAC = (todolistID: string) =>\r\n    ({type: 'ADD-TODOLIST-HELPER', todolistID} as const)","import {FilterValuesType, TodolistsType} from \"../App\";\r\n\r\n\r\ntype ChangeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC>\r\ntype DeleteTodolistACType = ReturnType<typeof deleteTodolistAC>\r\ntype AddTodolistACType = ReturnType<typeof addTodolistAC>\r\ntype ChangeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\n\r\n\r\ntype ActionType = ChangeTodolistFilterACType | DeleteTodolistACType |\r\n    AddTodolistACType | ChangeTodolistTitleACType;\r\n\r\nexport const todolistsReducer = (state: TodolistsType[], action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(el => el.id === action.todolistID ? {...el, filter: action.value}: el )\r\n        case \"DELETE-TODOLIST\":\r\n            return state.filter(el => el.id !== action.todolistID)\r\n        case \"ADD-TODOLIST\":\r\n            return [action.newTodolist, ...state];\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(el => el.id === action.todolistID ? {...el, title: action.title} : el)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const changeTodolistFilterAC = (todolistID: string, value: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', todolistID, value} as const)\r\nexport const deleteTodolistAC = (todolistID: string) =>\r\n    ({type: 'DELETE-TODOLIST', todolistID} as const)\r\nexport const addTodolistAC = (newTodolist: TodolistsType) =>\r\n    ({type: 'ADD-TODOLIST', newTodolist} as const)\r\nexport const changeTodolistTitleAC = (todolistID: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', todolistID, title} as const)\r\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport Todolist, { TaskType } from \"./Components/Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./Components/AddItemForm\";\r\nimport ButtonAppBar from \"./Components/ButtonAppBar\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport {\r\n    addTaskAC,\r\n    addTodolistHelperAC,\r\n    changeStatusTaskAC,\r\n    changeTaskInputValueAC,\r\n    removeTaskAC,\r\n    tasksReducer\r\n} from \"./reducers/tasksReducer\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    deleteTodolistAC,\r\n    todolistsReducer\r\n} from \"./reducers/todolistsReducer\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolistID1 = v1();\r\n    const todolistID2 = v1();\r\n\r\n    const [todolists, todolistsDispatch] = useReducer(todolistsReducer,[\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'}\r\n    ]);\r\n    const [tasks, tasksDispatch] = useReducer(tasksReducer,{\r\n        [todolistID1]: [\r\n            {id: v1(), inputValue: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), inputValue: \"JS\", isDone: true},\r\n            {id: v1(), inputValue: \"ReactJS\", isDone: false},\r\n            {id: v1(), inputValue: \"Rest API\", isDone: false},\r\n            {id: v1(), inputValue: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), inputValue: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), inputValue: \"JS\", isDone: true},\r\n            {id: v1(), inputValue: \"ReactJS\", isDone: false},\r\n            {id: v1(), inputValue: \"Rest API\", isDone: false},\r\n            {id: v1(), inputValue: \"GraphQL\", isDone: false},\r\n        ]\r\n    } )\r\n\r\n    //tasks Dispatch\r\n    function removeTask(todolistID: string, id: string) {\r\n        tasksDispatch(removeTaskAC(todolistID, id))\r\n    }\r\n    function changeStatusTask(todolistID: string, id: string, value: boolean) {\r\n        tasksDispatch(changeStatusTaskAC(todolistID, id, value))\r\n    }\r\n    function addTask(todolistID: string, title: string) {\r\n        tasksDispatch(addTaskAC(todolistID, title))\r\n    }\r\n    function changeTaskInput(todolistId: string, taskId: string, newInputText: string) {\r\n        tasksDispatch(changeTaskInputValueAC(todolistId, taskId, newInputText))\r\n    }\r\n\r\n\r\n    //todolists Dispatch\r\n    function changeTodolistFilter(todolistID: string, value: FilterValuesType) {\r\n        todolistsDispatch(changeTodolistFilterAC(todolistID, value))\r\n    }\r\n    function deleteTodolist(todolistID: string) {\r\n            todolistsDispatch(deleteTodolistAC(todolistID));\r\n            delete tasks[todolistID]\r\n        // можно ли добавить этот делит в reducer\r\n    }\r\n    function addTodolist(todolistTitle: string) {\r\n        let newTodolist: TodolistsType =  {id: v1(), title: todolistTitle, filter: 'all'};\r\n        todolistsDispatch(addTodolistAC(newTodolist))\r\n        tasksDispatch(addTodolistHelperAC(newTodolist.id))\r\n    }\r\n    function changeTodolistTitle(todolistId: string, title: string) {\r\n       todolistsDispatch(changeTodolistTitleAC(todolistId, title))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(el => {\r\n                        // почему не можем фильтровать напрямую tasks?\r\n                        let tasksForTodolist = tasks[el.id];\r\n                        if (el.filter === \"active\") {\r\n                            tasksForTodolist = tasks[el.id].filter( t => !t.isDone);\r\n                        }\r\n                        if (el.filter === \"completed\") {\r\n                            tasksForTodolist = tasks[el.id].filter( t => t.isDone);\r\n                        }\r\n\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={el.id}\r\n                                        todolistID={el.id}\r\n                                        filter={el.filter}\r\n                                        changeIsDone={changeStatusTask}\r\n                                        title={el.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeTodolistFilter}\r\n                                        addTask={addTask}\r\n                                        deleteTodolist={deleteTodolist}\r\n                                        changeTaskInputValue={changeTaskInput}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}